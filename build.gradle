plugins {
    id 'java'
    id 'io.quarkus' version "${quarkusPlatformVersion}"
    id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.allopen" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.kapt" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.noarg" version "${kotlinVersion}"
    id "org.sonarqube" version "${sonarqubeVersion}"
    id "jacoco"

}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-resteasy'
    implementation 'io.quarkus:quarkus-resteasy-jsonb'
    implementation 'io.quarkus:quarkus-hibernate-orm'
    implementation 'io.quarkus:quarkus-jdbc-postgresql'
    implementation 'io.quarkus:quarkus-kotlin'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'io.quarkus:quarkus-test-h2'
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    kapt "org.mapstruct:mapstruct-processor:${mapstructVersion}"
}

group = 'info.touret.musicquote'
version = '1.0'

compileJava {
    //source += sourceSets.generated.java
    options.compilerArgs =[
            '-parameters',
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true',
            '-Amapstruct.defaultComponentModel=cdi'
    ]
}
sourceSets {
    generated {
         kotlin.srcDirs += "${buildDir}/generated/source/kapt"
    }
}


java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

}
test {
    useJUnitPlatform()
    exclude '**/Native*'
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

sonarqube{
    properties{
        property "sonar.jacoco.reportPath", "$buildDir/jacoco/test.exec"
    }

}

buildNative {
    enableHttpUrlHandler = true
}

allOpen {
    annotation("javax.ws.rs.Path")
    annotation("javax.enterprise.context.ApplicationScoped")
    annotation("io.quarkus.test.junit.QuarkusTest")
}


noArg {
    annotation("javax.ws.rs.Path")
    annotation("javax.enterprise.context.ApplicationScoped")
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
    kotlinOptions.javaParameters = true
}

compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}

quarkus {
    setOutputDirectory("$projectDir/build/classes/kotlin/main")
}

quarkusDev {
    setSourceDir("$projectDir/src/main/kotlin")
}